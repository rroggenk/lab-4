---
title: "Global Health Monitor Dashboard"
format:
  dashboard:
    theme: cosmo 
    logo: images/Wellcome_Trust_logo.png 
    orientation: columns
    nav-tabs: true
    nav-buttons:
    - icon: github
      href: https://github.com/rroggenk/ 
      aria-label: GitHub
    - icon: linkedin
      href: https://www.linkedin.com/in/rroggenk/ 
      aria-label: LinkedIn
    - icon: envelope
      href: mailto:rroggenk@calpoly.edu 
      aria-label: Email
server: shiny 
---


```{r}
#| label: setup
#| context: setup 
#| message: false
#| warning: false
#| include: false 

# Load Libraries
library(shiny) 
library(bslib) 
library(bsicons) 
library(tidyverse)
library(scales)
library(plotly)
library(DT) 
library(ggrepel) 

# --- Data Loading and Prep Code ---

# Data for Cards 
vaccine_plot_data_card <- read.csv("/Users/rachelroggenkemper/Documents/STAT541/Labs/Lab4/data/vaccine_plot_data_card.csv")

# Data for Plot 1 (also used for dynamic card)
vaccine_data <- read.csv("/Users/rachelroggenkemper/Documents/STAT541/Labs/Lab4/data/vaccine_data.csv")

# Data for Plot 2
vaccine_plot_data <- read.csv("/Users/rachelroggenkemper/Documents/STAT541/Labs/Lab4/data/vaccine_plot_data.csv")

# Data for Interactive Table
health_data <- read.csv("/Users/rachelroggenkemper/Documents/STAT541/Labs/Lab4/data/health_data.csv")

# Initial calculation for the second (static) card
global_avg_disagree_effective <- mean(vaccine_plot_data_card$disagree_effective_pct, na.rm = TRUE)

# Get unique regions for checkbox input
unique_regions <- unique(vaccine_data$global_region)
# Ensure regions are sorted or in a desired order if necessary
unique_regions <- sort(unique_regions) 
```

# Vaccine Views

## {.sidebar} 
```{r}
#| label: region-checkboxes
# Checkbox input for regions
checkboxGroupInput("selected_regions", 
                   "Select Regions to Display:",
                   choices = unique_regions,
                   selected = unique_regions) # Default to all selected
```

## Column {width=75%}
### Row {height=25%}

#### Card 1 {width=50%}
```{r}
#| label: safe-avg-output
# Placeholder for the dynamic value box UI
uiOutput("safe_avg_card") 
```

```{r}
#| label: safe-avg-calculation
#| context: server 
# Server logic to calculate average and render the dynamic value box for Card 1

output$safe_avg_card <- renderUI({
  req(input$selected_regions) # Ensure regions are selected
  
  # Filter vaccine_data based on selected regions
  filtered_data <- vaccine_data %>%
    filter(global_region %in% input$selected_regions)
  
  # Handle case where no data remains after filtering
  if (nrow(filtered_data) == 0) {
     value_box(
        title = tags$span(style = "font-size: 0.8em;", "Avg: Agree/Strongly Agree Safe"), 
        value = "N/A",
        showcase = bsicons::bs_icon("shield-slash"), 
        theme_color = "secondary",
        height = "150px" 
     )
  } else {
      mean_val <- mean(filtered_data$vaccine_safe, na.rm = TRUE)
      box_color <- case_when(
        mean_val >= 0.85 ~ "success", 
        mean_val >= 0.70 ~ "info",    
        TRUE             ~ "warning" 
      )
      
      value_box(
        title = tags$span(style = "font-size: 0.8em;", "Avg: Agree/Strongly Agree Safe (Selected Regions)"), 
        value = tags$span(style="font-size: 1.6em;", scales::percent(mean_val, accuracy = 0.1)), 
        showcase = bsicons::bs_icon("shield-check"), 
        theme_color = box_color,
        height = "150px" 
      )
  }
})

```

#### Card 2 {width=50%}
::: {.valuebox icon="shield-x" color="danger" height="150px"}
Global Avg: Disagree Effective
<span style="font-size: 1.6em;">`r scales::percent(global_avg_disagree_effective, accuracy = 0.1)`</span>
:::

### Row {height=75%}

#### Perceptions {.tabset}

::: {.card title="Vaccine Safety Perception by Region"}

```{r}
#| label: plot-vaccine-safety-output
# Placeholder for the dynamic plot
plotOutput("vaccine_safety_plot") 
```

```{r}
#| label: plot-vaccine-safety-render
#| context: server 
# Server logic to render the dynamic plot

output$vaccine_safety_plot <- renderPlot({
  req(input$selected_regions) # Ensure regions are selected
  
  plot_data_filtered <- vaccine_data %>%
    filter(global_region %in% input$selected_regions)
  
  if (nrow(plot_data_filtered) == 0) {
    plot(NULL, xlim=c(0,1), ylim=c(0,1), ann=FALSE, axes=FALSE)
    text(0.5, 0.5, "Please select at least one region.")
    return() 
  }

  region_colors <- setNames(
      c("skyblue1", "seagreen4", "yellow2", "orangered4", "salmon1", "dodgerblue4"),
      sort(unique(vaccine_data$global_region)) 
  )
  plot_colors <- region_colors[names(region_colors) %in% input$selected_regions]

  ordered_levels <- levels(reorder(vaccine_data$global_region, vaccine_data$region_median))
  plot_levels <- ordered_levels[ordered_levels %in% input$selected_regions]
  
  plot_data_filtered %>%
    mutate(global_region = factor(global_region, levels = plot_levels)) %>%
    ggplot(aes(y = global_region, 
               x = vaccine_safe, 
               color = global_region)) +
    geom_point(aes(alpha = 0.78), size = 3, show.legend = FALSE) + 
    geom_errorbar(aes(y = global_region, 
                      xmax = region_median, 
                      xmin = region_median),
                  size = 0.5, 
                  linetype = "solid", 
                  width = 0.5, 
                  color = "black") +
    scale_color_manual(values = plot_colors) + 
    labs(x = NULL, 
         y = NULL,
         title = "Percentage Agreeing/Strongly Agreeing Vaccines are Safe,\nby Country and Selected Global Region(s)") + 
    theme_bw() +
    theme(legend.position = "none",
          panel.grid.major.y = element_blank(),
          panel.grid.minor.y = element_blank(),
          axis.ticks.y = element_blank(),
          axis.text.y = element_blank(), 
          plot.title = element_text(face = 'bold')) +
    scale_x_continuous(breaks = seq(0.2, 1, by = 0.1),
                       labels = label_percent(),
                       limits = c(0.15, 1.05), 
                       oob = scales::rescale_none) + 
    guides(color = "none") + 
    geom_text(aes(y = global_region, x = 0.18, label = global_region), 
              hjust = 0,
              size = 4,
              fontface = "bold",
              check_overlap = FALSE, 
              show.legend = FALSE) + 
    ggrepel::geom_text_repel(
              data = . %>% filter(!is.na(min_max)), 
              aes(label = min_max), 
              size = 3, 
              color = "gray18",
              show.legend = FALSE,
              box.padding = 0.4, 
              point.padding = 0.2, 
              segment.color = 'grey50', 
              segment.size = 0.3,     
              min.segment.length = 0, 
              force = 10,             
              max.overlaps = Inf      
              ) +
    coord_cartesian(clip = "off") 

}, res = 96) 

```
:::

::: {.card title="Safety vs. Effectiveness Disagreement"}

This scatterplot explores the relationship between the percentage of people in a country who disagree that vaccines are safe and the percentage who disagree that they are effective. Each point represents a country.

```{r}
#| label: plot-safety-vs-effectiveness-lab2
#| title: "Relationship between Disagreement on Vaccine Safety and Effectiveness" 

# This plot remains static (non-reactive)

vaccine_plot <- vaccine_plot_data %>%
  ggplot(aes(x = disagree_safe, y = disagree_effective)) +
  geom_point(aes(text = paste0("Country: ", country, "<br>",
                               "Disagree vaccines are safe: ", 
                               round(disagree_safe * 100, 2), "%<br>",
                               "Disagree vaccines are effective: ", 
                               round(disagree_effective * 100, 2), "%")),
             color = "skyblue1", shape = 15, size = 1.8) +
  geom_smooth(method = "lm", se = FALSE, color = "yellow2", linewidth = 0.8) +
  theme_bw() +
  scale_x_continuous(breaks = seq(0, 1, by = 0.1),
                     labels = label_percent()) +
  scale_y_continuous(breaks = seq(0, 1, by = 0.1),
                     labels = label_percent()) +   
  labs(x = "Disagree Vaccines are Safe (%)", 
       y = "Disagree Vaccines are Effective (%)") 

ggplotly(vaccine_plot, tooltip = "text") %>%
  layout(title = list(text = "Country-Level Vaccine Disagreement: Safety vs. Effectiveness", 
                      x = 0.01,  
                      xanchor = "left"),
         margin = list(t = 80)) 
```
:::

# Health Interest

## {.sidebar}
```{r}
#| label: health-interest-slider
# Slider input for health interest percentage

min_interest <- floor(min(health_data$percentage, na.rm = TRUE)) 
max_interest <- ceiling(max(health_data$percentage, na.rm = TRUE))

sliderInput("interest_threshold", 
            "Minimum % Interested in Health Info:",
            min = min_interest, 
            max = max_interest, 
            value = max(min_interest, min(max_interest, round((min_interest + max_interest) / 2))), 
            step = 1,
            post = "%") 
```

## Column {width=75%}
::: {.card title="Countries by Interest in Health Information"}

```{r}
#| label: health-table-output
# Placeholder for the dynamic table
DTOutput("health_table")
```


```{r}
#| label: health-table-render
#| context: server
# Server logic to render the dynamic DT table

output$health_table <- renderDT({
  req(input$interest_threshold) 
  
  filtered_health_data <- health_data %>%
    filter(percentage >= input$interest_threshold) %>%
    select(Country = country, `Interest Percentage` = percentage) %>%
    arrange(`Interest Percentage`) 
  
  datatable(filtered_health_data,
            rownames = FALSE, 
            options = list(
              pageLength = 10, 
              autoWidth = TRUE,
              order = list(list(1, 'asc')), 
              columnDefs = list(
                  list(className = 'dt-center', targets = "_all") 
              ) 
            )) %>%
    formatRound('Interest Percentage', digits = 1) 

})
```
:::

